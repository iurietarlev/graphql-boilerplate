type Query {
  me: User!
  users(query: String, first: Int, skip: Int, after: String, orderBy: UserOrderByInput): [User!]!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayLoad!
  login(data: LoginUserInput!): AuthPayLoad!
  deleteUser: User!
  updateUser(data: UpdateUserInput!): User!
}

# type Subscription {
# }

type AuthPayLoad {
  token: String!
  user: User!
}

input LoginUserInput {
  email: String!
  password: String!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
  email: String
  password: String
}
type User {
  id: ID!
  name: String!
  email: String
  posts: [Post!]!
  comments: [Comment!]!
  createdAt: String!
  updatedAt: String!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}
